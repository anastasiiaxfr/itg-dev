$black: #000
$white: #fff
$dark: #171717

$dark1: #111823
$dark2: #15171D
$dark3: #0D0D0D
$dark4: #1E1E1E
$dark5: #A6A6A6
$dark6: #0d0e11


$blue: #40C6FF
$blue1: #56FFEB

$grey: #89898D
$grey1: #D9D9D9


$grad: linear-gradient(109.2deg, #40C6FF -24.33%, #1A8AD7 7.43%, #56FFEB 103.53%)
$grad0: linear-gradient(-109.2deg, #40C6FF -24.33%, #1A8AD7 7.43%, #56FFEB 103.53%)
$grad1: linear-gradient(180deg, rgba(13, 13, 13, 0) 0%, #0D0D0D 176.82%)
$grad2: linear-gradient(109.97deg, #40C6FF 0%, #1A8AD7 20.08%, #2809E4 47.88%, #56FFEB 80.83%)


$bxsd: 0px 3px 13px 1px rgba(#40C6FF, 0.5)
$bxsd1: 1px 0 0 1px rgba(#56FFEB, 0.5), 0 1px 0 1px rgba(#2809E4, 0.5), 0 0 0 0 rgba(#40C6FF, 0.5)

$ffHeading: 'StretchPro'
$ffText: 'Poppins'
$ffText2: 'Montserrat'
$ffBack: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"

$xlg: 1400
$lg: 1200
$md: 991
$sm: 792
$lsm: 640
$xsm: 520
$xs: 480
$xxs: 380


$trs: all 0.35s ease-in-out

$brs: 8px
$brs2: 40px
$brs3: 15px
$brs4: 30px

$gap20: 20px
$gapY: 30px
$gapSection: 50px



=ft($fz, $lh: 16, $fw: 400, $ff: $ffText)
    $lh: $lh/$fz
    $fz: $fz/16 + rem
    $ff: $ff, $ffBack
    font: $fw $fz/$lh $ff 


=theme($theme)
    @if $theme == dark
        background-color: $dark4
        color: $grey1

        .btn
            background-color: $white

        .text__sub
            color: $grey

        *::selection
            background-color: rgba($white, 0.1)

    @if $theme == dark2
        background-color: $dark1
        color: $grey1

    @if $theme == dark3
        background-color: $dark2
        color: $dark5

    @if $theme == white
        background-color: $white
        color: $black




=sz($w, $h)
    width: $w
    height: $h

=flex($fx, $ai, $jc, $fxw)
    display: $fx
    align-items: $ai
    justify-content: $jc
    flex-wrap: $fxw


// input +padding((t, 30px), (b, 40px))
// +position(absolute, (t, 0), (r, 0))
=position($ps, $val)
    @each $x in $ps
        @if $x == t
            top: $val

        @if $x == b
            bottom: $val

        @if $x == l
            left: $val

        @if $x == r
            right: $val

=ps($params...)
    position: nth($params, 1)
    @each $par, $val in $params
        @if $par != null and $val != null
            +position($par, $val)

// input +padding((t, 30px), (b, 40px))
=padding($pd, $val)
    @if $pd == t
        padding-top: $val

    @if $pd == b
        padding-bottom: $val

    @if $pd == l
        padding-left: $val

    @if $pd == r
        padding-right: $val

    @if $pd == all
        padding: $val

    

=pd($params...)
    @each $par, $val in $params
        @if $par != null and $val != null
            +padding($par, $val)

=margin($mg, $val)
    @if $mg == t
        margin-top: $val

    @if $mg == b
        margin-bottom: $val

    @if $mg == l
        margin-left: $val

    @if $mg == r
        margin-right: $val

    @if $mg == all
        margin: $val

=mg($params...)
    @each $par, $val in $params
        @if $par != null and $val != null
            +margin($par, $val)

// =sp($prop, $params...)
// 	@if $prop == mg
// 		+mg($params)
// 	@if $prop == pd 
// 		+pd($params)	

$i: 0
=spacer($arr)
    @for $val from 1 through length($arr) 
        $spr: nth($arr, 1)
    @if $spr == mg
        @for $i from 2 through length($arr)
            $props: nth($arr, $i)
            +margin($props...)
    @if $spr == pd
        @for $i from 2 through length($arr)
            $props: nth($arr, $i)
            +padding($props...)
    
=sp($x, $y)
    +spacer($x)
    +spacer($y)
        
    
//+sp((mg, (l, 20px), (b, 15px)), (pd, (r, 10px)))

    
=maw($brkp)
    @media only screen and (max-width: $brkp+"px")
        @content

=miw($brkp)
    @media only screen and (min-width: $brkp+"px")
        @content

=mw($min, $max)
    @media only screen and (min-width: $min+"px") and (max-width: $max+"px")
        @content


@function rem($val)
    $res: $val/16 + rem
    @return $res

@function em($val)
    $res: $val/16 + em
    @return $res 



//  font-size: calc([minfz] + ([maxfz] - [minfz]) * ((100vw - [miw]) / ([maw] - [miw])));
    
=rfz($maw, $miw, $minfz, $maxfz)
    $maw : $maw + px
    $miw : $miw + px
    $minfz : $minfz + px
    $maxfz : $maxfz + px	
    @media only screen and (min-width: $miw) 
        font-size: calc(#{$minfz} + (#{$maxfz} - #{$minfz}) * ((100vw - #{$miw}) / (#{$maw} - #{$miw})))

    @media only screen and (min-width: $maw)
        font-size: $maxfz
    
// +rfz(1120, 320, 12, 40)

\:root
    //--gapSection: 75px
    --gapSection: 100px
    --sectionMt: 50px
    --gapLg: 48px
    --gapMd: 32px
    --gapSm: 24px
    --gap: 16px
    --gapXs: 8px
    --navGap: 32px
    +maw($xs)
        --gapSection: 50px
        --navGap: 16px
    +maw($xsm)
        --sectionMt: 30px

@keyframes toBtm 
    0%
        transform: translateY(0px)
    50%
        transform: translateY(10px)


%mask
    mask: linear-gradient($white 0 0) content-box,linear-gradient($white 0 0)
    mask-composite: exclude
    -webkit-mask: linear-gradient($white 0 0) content-box,linear-gradient($white 0 0)
    -webkit-mask-composite: xor
    content: ""
    position: absolute
    z-index: -1
    inset: 0
    padding: 2px
    background: $grad2

%text
    z-index: -1
    +ft(99, 100, 400, $ffHeading)
    text-shadow: 0 0 2px $blue
    white-space: nowrap
    color: $dark6
    color: transparent
    -webkit-text-stroke: 1px rgba($blue, 0.3)
    text-stroke: 1px rgba($blue, 0.3)
    text-shadow: none
    opacity: 0.3

%text-grad
    color: inherit
    background: $grad
    -webkit-background-clip: text
    -webkit-text-fill-color: transparent

%box
    background: url('../images/bg-wave-0.svg') no-repeat 50% 40%/cover
    border-radius: $brs4
    overflow: hidden
    border-bottom: 1px solid $blue
    +maw($sm)
        padding: 0
        background-image: none
        border: none